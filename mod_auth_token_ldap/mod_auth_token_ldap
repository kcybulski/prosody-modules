-- mod_auth_token_ldap

local formdecode = require "util.http".formdecode;
local generate_uuid = require "util.uuid".generate;
local new_sasl = require "util.sasl".new;
local sasl = require "util.sasl";
local token_util = module:require "token/util".new(module);
local sessions = prosody.full_sessions;
local jid_split = require "util.jid".split;
local lualdap = require "lualdap";

local function ldap_filter_escape(s)
	return (s:gsub("[*()\\%z]", function(c) return ("\\%02x"):format(c:byte()) end));
end

-- Config options
local ldap_server = module:get_option_string("ldap_server", "localhost");
local ldap_rootdn = module:get_option_string("ldap_rootdn", "");
local ldap_password = module:get_option_string("ldap_password", "");
local ldap_tls = module:get_option_boolean("ldap_tls");
local ldap_scope = module:get_option_string("ldap_scope", "subtree");
local ldap_filter = module:get_option_string("ldap_filter", "(uid=$user)"):gsub("%%s", "$user", 1);
local ldap_base = assert(module:get_option_string("ldap_base"), "ldap_base is a required option for ldap");
local ldap_mode = module:get_option_string("ldap_mode", "bind");
local ldap_admins = module:get_option_string("ldap_admin_filter",
	module:get_option_string("ldap_admins")); -- COMPAT with mistake in documentation
local host = ldap_filter_escape(module:get_option_string("realm", module.host));
local auth_type = "ldap";

-- Initiate connection
local ld = nil;
module.unload = function() if ld then pcall(ld, ld.close); end end

function ldap_do_once(method, ...)
	if ld == nil then
		local err;
		ld, err = lualdap.open_simple(ldap_server, ldap_rootdn, ldap_password, ldap_tls);
		if not ld then return nil, err, "reconnect"; end
	end

	-- luacheck: ignore 411/success
	local success, iterator, invariant, initial = pcall(ld[method], ld, ...);
	if not success then ld = nil; return nil, iterator, "search"; end

	local success, dn, attr = pcall(iterator, invariant, initial);
	if not success then ld = nil; return success, dn, "iter"; end

	return dn, attr, "return";
end

function ldap_do(method, retry_count, ...)
	local dn, attr, where;
	for _=1,1+retry_count do
		dn, attr, where = ldap_do_once(method, ...);
		if dn or not(attr) then break; end -- nothing or something found
		module:log("warn", "LDAP: %s %s (in %s)", tostring(dn), tostring(attr), where);
		-- otherwise retry
	end
	if not dn and attr then
		module:log("error", "LDAP: %s", tostring(attr));
	end
	return dn, attr;
end

function get_user(username)
	module:log("debug", "get_user(%q)", username);
	return ldap_do("search", 2, {
		base = ldap_base;
		scope = ldap_scope;
		sizelimit = 1;
		filter = ldap_filter:gsub("%$(%a+)", {
			user = ldap_filter_escape(username);
			host = host;
		});
	});
end

local provider = {};
local host = module.host;

function provider.create_user(username, password) -- luacheck: ignore 212
	return nil, "Account creation not available.";
end

function provider.delete_user(username)
        return nil;
end

function provider.user_exists(username)
	return not not get_user(username);
end

function provider.set_password(username, password)
    return nil, "Set password not supported";
end

if ldap_mode == "getpasswd" then
	function provider.get_password(username)
		local dn, attr = get_user(username);
		if dn and attr then
			return attr.userPassword;
		end
	end

	function provider.test_password(username, password)
		return provider.get_password(username) == password;
	end

elseif ldap_mode == "bind" then
	local function test_password(userdn, password)
		local ok, err = lualdap.open_simple(ldap_server, userdn, password, ldap_tls);
		if not ok then
			module:log("debug", "ldap open_simple error: %s", err);
		end
		return not not ok;
	end

	function provider.test_password(username, password)
		local dn = get_user(username);
		if not dn then return end
		return test_password(dn, password)
	end
  
else
        module:log("error", "Unsupported ldap_mode %s", tostring(ldap_mode));
end

if ldap_admins then
        function provider.is_admin(jid)
                local username, user_host = jid_split(jid);
		            if user_host ~= module.host then
			                  return false;
		            end
		            return ldap_do("search", 2, {
			                  base = ldap_base;
			                  scope = ldap_scope;
			                  sizelimit = 1;
			                  filter = ldap_admins:gsub("%$(%a+)", {
				                        user = ldap_filter_escape(username);
				                        host = host;
			                  });
		            });
	      end
end

function init_session(event)

        local session, request = event.session, event.request;
        local query = request.url.query;
        if query ~= nil then
                local params = formdecode(query);
                session.auth_token = query and params.token or nil;
                if (session.auth_token ~= nil) then
                        auth_type = "token";
                end
                -- previd is used together with https://modules.prosody.im/mod_smacks.html
                -- the param is used to find resumed session and re-use anonymous(random) user id
                -- (see get_username_from_token)
                session.previd = query and params.previd or nil;

                -- The room name and optional prefix from the bosh query
                session.jitsi_bosh_query_room = params.room;
                session.jitsi_bosh_query_prefix = params.prefix or "";
        end
end
        
module:hook_global("bosh-session", init_session);
module:hook_global("websocket-session", init_session);

function provider.get_sasl_handler(session)
        local function get_username_from_token(self, message)
        local res, error, reason = token_util:process_and_verify_token(session);

        if (res == false) then
                log("warn",
                        "Error verifying token err:%s, reason:%s", error, reason);
                return res, error, reason;
        end

        local customUsername
                = prosody.events.fire_event("pre-jitsi-authentication", session);
        
        if (customUsername) then
                self.username = customUsername;
        elseif (session.previd ~= nil) then
                for _, session1 in pairs(sessions) do
                    if (session1.resumption_token == session.previd) then
                        self.username = session1.username;
                        break;
                    end
                end
            else
                self.username = message;
            end
            return res;
        end
        if (auth_type == "token") then
                return new_sasl(host, { anonymous = get_username_from_token });
        else
                if ldap_mode == "getpasswd" then
                        return new_sasl(module.host, {
                                plain = function(sasl, username) -- luacheck: ignore 212/sasl
                                        local password = provider.get_password(username);
                                        if not password then return "", nil; end
                                        return password, true;
                                end
                        });
                elseif ldap_mode == "bind" then
                        return new_sasl(module.host, {
                                plain_test = function(sasl, username, password) -- luacheck: ignore 212/sasl
                                        return provider.test_password(username, password), true;
                                end
                        });
                end
        end
                
end


module:provides("auth", provider);

local function anonymous(self, message)
                
        local username = generate_uuid();
                
        -- This calls the handler created in 'provider.get_sasl_handler(session)'
        local result, err, msg = self.profile.anonymous(self, username, self.realm);

        if result == true then
                if (self.username == nil) then
                        self.username = username;
                end
                return "success";
        else
                return "failure", err, msg;
        end
end

sasl.registerMechanism("ANONYMOUS", {"anonymous"}, anonymous);
